{"version":3,"file":"animation_event.js","sourceRoot":"","sources":["../../../../packages/animations/src/animation_event.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An instance of this class is returned as an event parameter when an animation\n * callback is captured for an animation either during the start or done phase.\n *\n * ```typescript\n * @Component({\n *   host: {\n *     '[@myAnimationTrigger]': 'someExpression',\n *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',\n *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n *   },\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *        // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   someExpression: any = false;\n *   captureStartEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n *\n *   captureDoneEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface AnimationEvent {\n  /**\n   * The name of the state from which the animation is triggered.\n   */\n  fromState: string;\n  /**\n   * The name of the state in which the animation completes.\n   */\n  toState: string;\n  /**\n   * The time it takes the animation to complete, in milliseconds.\n   */\n  totalTime: number;\n  /**\n   * The animation phase in which the callback was invoked, one of\n   * \"start\" or \"done\".\n   */\n  phaseName: string;\n  /**\n   * The element to which the animation is attached.\n   */\n  element: any;\n  /**\n   * Internal.\n   */\n  triggerName: string;\n  /**\n   * Internal.\n   */\n  disabled: boolean;\n}\n"]}