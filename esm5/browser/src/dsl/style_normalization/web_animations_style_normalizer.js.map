{"version":3,"file":"web_animations_style_normalizer.js","sourceRoot":"","sources":["../../../../../../../../packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts"],"names":[],"mappings":";;;;;AAOA,OAAO,EAAC,mBAAmB,EAAC,MAAM,YAAY,CAAC;AAE/C,OAAO,EAAC,wBAAwB,EAAC,MAAM,8BAA8B,CAAC;AAEtE,IAAA;IAAkD,wDAAwB;;;;;;;;;IACxE,4DAAqB;;;;;IAArB,UAAsB,YAAoB,EAAE,MAAgB;QAC1D,OAAO,mBAAmB,CAAC,YAAY,CAAC,CAAC;KAC1C;;;;;;;;IAED,0DAAmB;;;;;;;IAAnB,UACI,oBAA4B,EAAE,kBAA0B,EAAE,KAAoB,EAC9E,MAAgB;;QAClB,IAAI,IAAI,GAAW,EAAE,CAAC;;QACtB,IAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAEvC,IAAI,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,GAAG,EAAE;YAC5E,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,IAAI,GAAG,IAAI,CAAC;aACb;iBAAM;;gBACL,IAAM,iBAAiB,GAAG,KAAK,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBAChE,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;oBACzD,MAAM,CAAC,IAAI,CAAC,yCAAuC,oBAAoB,SAAI,KAAO,CAAC,CAAC;iBACrF;aACF;SACF;QACD,OAAO,MAAM,GAAG,IAAI,CAAC;KACtB;uCAjCH;EAWkD,wBAAwB,EAuBzE,CAAA;AAvBD,wCAuBC;;AAED,IAAM,oBAAoB,GAAG,cAAc,CACvC,gUAAgU;KAC3T,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;AAErB,SAAS,cAAc,CAAC,IAAc;;IACpC,IAAM,GAAG,GAA6B,EAAE,CAAC;IACzC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,EAAf,CAAe,CAAC,CAAC;IACrC,OAAO,GAAG,CAAC;CACZ","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {dashCaseToCamelCase} from '../../util';\n\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\n\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n  normalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n\n  normalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let unit: string = '';\n    const strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst DIMENSIONAL_PROP_MAP = makeBooleanMap(\n    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n        .split(','));\n\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n"]}